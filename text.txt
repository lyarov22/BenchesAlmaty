==================== ./manage.py ====================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BenchesAlmaty.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


==================== ./script.py ====================
import os
import shutil

def copy_code_to_txt(input_directory, output_file):
    with open(output_file, 'w', encoding='utf-8') as output_txt:
        for root, dirs, files in os.walk(input_directory):
            for file in files:
                if file.endswith(".py"):
                    file_path = os.path.join(root, file)
                    with open(file_path, 'r', encoding='utf-8') as input_file:
                        output_txt.write(f"{'='*20} {file_path} {'='*20}\n")
                        output_txt.write(input_file.read())
                        output_txt.write("\n\n")
                        
# Замените 'input_directory' на путь к вашей директории и 'output_file' на путь и имя файла для сохранения кода
input_directory = './'
output_file = './text.txt'

copy_code_to_txt(input_directory, output_file)


==================== ./benches\admin.py ====================
from django.contrib import admin
from .models import BenchType, BenchDistrict, BenchEnvironment, Bench, BenchImage

@admin.register(BenchType)
class BenchTypeAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug')
    prepopulated_fields = {'slug': ('name',)}

@admin.register(BenchDistrict)
class BenchDistrictAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug')
    prepopulated_fields = {'slug': ('name',)}

@admin.register(BenchEnvironment)
class BenchEnvironmentAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug')
    prepopulated_fields = {'slug': ('name',)}

class BenchImageInline(admin.TabularInline):
    model = BenchImage

@admin.register(Bench)
class BenchAdmin(admin.ModelAdmin):
    list_display = ('id', 'location_latitude', 'location_longitude', 'created_date', 'author')
    list_filter = ('type', 'district', 'environment')
    inlines = [BenchImageInline]
    search_fields = ['id']

@admin.register(BenchImage)
class BenchImageAdmin(admin.ModelAdmin):
    list_display = ('bench', 'image')


==================== ./benches\apps.py ====================
from django.apps import AppConfig


class BenchesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'benches'


==================== ./benches\forms.py ====================
from django import forms
from .models import Bench, BenchImage

class BenchForm(forms.ModelForm):
    class Meta:
        model = Bench
        fields = ['location_latitude', 'location_longitude', 'avatar', 'rating', 'has_backrest', 'has_bin', 'deskription', 'type', 'district', 'environment']

    def __init__(self, *args, **kwargs):
        super(BenchForm, self).__init__(*args, **kwargs)
        self.fields['avatar'].widget.attrs.update({'accept': 'image/*'})  # Ограничиваем типы файлов, которые можно загрузить

class BenchImageForm(forms.ModelForm):
    class Meta:
        model = BenchImage
        fields = ['image']


==================== ./benches\models.py ====================
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator

from userSystem.models import CustomUser

class BenchType(models.Model):
    name = models.CharField(max_length=200, db_index=True, verbose_name='Тип скамейки')
    slug = models.SlugField(max_length=200, db_index=True, unique=True, verbose_name='Ссылка')
    avatar = models.ImageField(default='default.png', upload_to='bench_type/', blank=True, null=True)

    class Meta:
        ordering = ('name',)
        verbose_name = 'Тип скамейки'
        verbose_name_plural = 'Тип скамеек'

    def __str__(self):
        return self.name
    

class BenchDistrict(models.Model):
    name = models.CharField(max_length=200, db_index=True, verbose_name='Район скамейки')
    slug = models.SlugField(max_length=200, db_index=True, unique=True, verbose_name='Ссылка')
    avatar = models.ImageField(default='default.png', upload_to='bench_district/', blank=True, null=True)
    
    class Meta:
        ordering = ('name',)
        verbose_name = 'Район скамейки'
        verbose_name_plural = 'Район скамеек'

    def __str__(self):
        return self.name


class BenchEnvironment(models.Model):
    name = models.CharField(max_length=200, db_index=True, verbose_name='Окружение скамейки')
    slug = models.SlugField(max_length=200, db_index=True, unique=True, verbose_name='Ссылка')
    avatar = models.ImageField(default='default.png', upload_to='bench_environment/', blank=True, null=True)
    
    class Meta:
        ordering = ('name',)
        verbose_name = 'Окружение скамейки'
        verbose_name_plural = 'Окружение скамеек'

    def __str__(self):
        return self.name


class Bench(models.Model):
    id = models.BigAutoField(primary_key=True)
    location_latitude = models.FloatField(verbose_name="Широта")
    location_longitude = models.FloatField(verbose_name="Долгота")

    avatar = models.ImageField(default='noBenchImage.png', upload_to='bench_avatars/', blank=True, null=True)

    rating = models.FloatField(default=0.0, validators=[MinValueValidator(0.0), MaxValueValidator(5.0)],)

    
    has_backrest = models.BooleanField(default=None, blank=True, null=True)
    has_bin = models.BooleanField(default=None, blank=True, null=True)

    created_date = models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации')

    deskription = models.TextField(blank=True)

    author = models.ForeignKey(CustomUser, on_delete=models.CASCADE, verbose_name="Автор", default=CustomUser, editable=False)

    type = models.ForeignKey(BenchType, on_delete=models.CASCADE, blank=True, null=True)
    district = models.ForeignKey(BenchDistrict, on_delete=models.CASCADE, blank=True, null=True)
    environment = models.ForeignKey(BenchEnvironment, on_delete=models.CASCADE, blank=True, null=True)

    class Meta:
        verbose_name = "Скаймейка"
        verbose_name_plural = "Скаймейки"

    def __str__(self):
        return str(self.id)
    
    def get_avatar_url(self):
        if self.avatar:
            return self.avatar.url
        # Здесь вы можете вернуть путь к изображению по умолчанию или другую логику по вашему выбору
        return '/media/default.png'
    
    def get_rating(self):
        rating = int(self.rating)

        return int(rating)
    
    def image_upload_to(instance, filename):
        return f'bench_images/{instance.bench.id}/avatar/{filename}'
    

class BenchImage(models.Model):
    bench = models.ForeignKey(Bench, on_delete=models.CASCADE, related_name='images')

    def image_upload_to(instance, filename):
        return f'bench_images/{instance.bench.id}/{filename}'
    
    image = models.ImageField(upload_to=image_upload_to, verbose_name='Дополнительное фото', blank=True, null=True)

    def __str__(self):
        return f"{self.bench.id} Image"
    
    class Meta:
        verbose_name = 'Изображение'
        verbose_name_plural = 'Изображения'

==================== ./benches\tests.py ====================
from django.test import TestCase

# Create your tests here.


==================== ./benches\urls.py ====================
from django.urls import path
from . import views

app_name = 'benches'

urlpatterns = [
    path('create_bench/', views.create_bench, name='create_bench'),
    path('', views.bench_list, name='bench_list'),
    
    path('bench/<int:bench_id>/', views.bench_detail, name='bench_detail'),

    
]

==================== ./benches\views.py ====================
from django.shortcuts import get_object_or_404, render, redirect

from django.db.models import Count

from benches.models import Bench, BenchDistrict, BenchType
from .forms import BenchForm, BenchImageForm

def create_bench(request):
    benches = Bench.objects.all()
    if request.method == 'POST':
        bench_form = BenchForm(request.POST, request.FILES)
        image_form = BenchImageForm(request.POST, request.FILES)

        if bench_form.is_valid() and image_form.is_valid():
            bench = bench_form.save(commit=False)
            bench.author = request.user  # Устанавливаем автора скамейки текущим пользователем
            bench.save()

            image = image_form.save(commit=False)
            image.bench = bench
            image.save()

            return redirect('mySite:index')  # Укажите URL, куда перенаправить после успешного создания
    else:
        bench_form = BenchForm()
        image_form = BenchImageForm()

    return render(request, 'benches/create_bench.html', {'benches': benches, 'bench_form': bench_form, 'image_form': image_form})

def bench_count():
    benches = Bench.objects.all()
    return benches

def bench_list(request):
    benches = Bench.objects.all()
    districts = BenchDistrict.objects.annotate(districtBenchesCount=Count('bench')).all()
    bench_types = BenchType.objects.annotate(bench_typesCount=Count('bench')).all()

    # Фильтрация по району
    district_slug = request.GET.get('district')
    if district_slug:
        benches = benches.filter(district__slug=district_slug)
        
    # Фильтрация по типу
    type_slug = request.GET.get('type')
    if type_slug:
        benches = benches.filter(type__slug=type_slug)

    # Фильтрация по наличию/отсутствию урны
    has_bin = request.GET.get('has_bin')
    if has_bin:
        benches = benches.filter(has_bin=True)
    elif has_bin == '0':
        benches = benches.filter(has_bin=False)

    # Фильтрация по наличию/отсутствию спинки
    has_backrest = request.GET.get('has_backrest')
    if has_backrest:
        benches = benches.filter(has_backrest=True)
    elif has_backrest == '0':
        benches = benches.filter(has_backrest=False)

    benches = benches.annotate(districtBenchesCount=Count('id'))

    return render(request, 
        'benches/bench_list.html', 
        {'benches': benches, 'districts': districts, 'bench_types': bench_types, 
        'benchesAll':  bench_count().count,

        'hasBackrestNow': benches.filter(has_backrest=True).count, 
        'hasBinNow': benches.filter(has_bin=True).count,
         
        'hasBackrestAll': bench_count().filter(has_backrest=True).count,
        'hasBinAll': bench_count().filter(has_bin=True).count,
        })


def bench_detail(request, bench_id):
    bench = get_object_or_404(Bench, id=bench_id)
    return render(request, 'benches/bench_detail.html', {'bench': bench})

==================== ./benches\__init__.py ====================


==================== ./benches\migrations\0001_initial.py ====================
# Generated by Django 4.2 on 2023-12-07 12:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bench',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('location_latitude', models.FloatField(verbose_name='Широта')),
                ('location_longitude', models.FloatField(verbose_name='Долгота')),
                ('avatar', models.ImageField(blank=True, default='default.png', null=True, upload_to='user_avatars/')),
                ('rating', models.IntegerField(default=0)),
                ('has_backrest', models.BooleanField(blank=True, default=None, null=True)),
                ('has_bin', models.BooleanField(blank=True, default=None, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации')),
                ('deskription', models.TextField(blank=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Скаймейка',
                'verbose_name_plural': 'Скаймейки',
            },
        ),
        migrations.CreateModel(
            name='BenchDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Район скамейки')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='Ссылка')),
                ('avatar', models.ImageField(blank=True, default='default.png', null=True, upload_to='bench_district/')),
            ],
            options={
                'verbose_name': 'Район скамейки',
                'verbose_name_plural': 'Район скамеек',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='BenchEnvironment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Окружение скамейки')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='Ссылка')),
                ('avatar', models.ImageField(blank=True, default='default.png', null=True, upload_to='bench_environment/')),
            ],
            options={
                'verbose_name': 'Окружение скамейки',
                'verbose_name_plural': 'Окружение скамеек',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='BenchType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200, verbose_name='Тип скамейки')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='Ссылка')),
                ('avatar', models.ImageField(blank=True, default='default.png', null=True, upload_to='bench_type/')),
            ],
            options={
                'verbose_name': 'Тип скамейки',
                'verbose_name_plural': 'Тип скамеек',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='BenchImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='bench/<bound method Field.__str__ of <django.db.models.fields.related.ForeignKey>>', verbose_name='Дополнительное фото')),
                ('bench', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='benches.bench')),
            ],
            options={
                'verbose_name': 'Изображение',
                'verbose_name_plural': 'Изображения',
            },
        ),
        migrations.AddField(
            model_name='bench',
            name='district',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benches.benchdistrict'),
        ),
        migrations.AddField(
            model_name='bench',
            name='environment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benches.benchenvironment'),
        ),
        migrations.AddField(
            model_name='bench',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benches.benchtype'),
        ),
    ]


==================== ./benches\migrations\0002_alter_benchimage_image.py ====================
# Generated by Django 4.2 on 2023-12-07 12:14

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('benches', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='benchimage',
            name='image',
            field=models.ImageField(upload_to='bench/None', verbose_name='Дополнительное фото'),
        ),
    ]


==================== ./benches\migrations\0003_alter_benchimage_image.py ====================
# Generated by Django 4.2 on 2023-12-07 12:16

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('benches', '0002_alter_benchimage_image'),
    ]

    operations = [
        migrations.AlterField(
            model_name='benchimage',
            name='image',
            field=models.ImageField(upload_to='bench/%Y/%m/%d/', verbose_name='Дополнительное фото'),
        ),
    ]


==================== ./benches\migrations\0004_alter_bench_avatar_alter_bench_district_and_more.py ====================
# Generated by Django 4.2 on 2023-12-07 12:24

import benches.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('benches', '0003_alter_benchimage_image'),
    ]

    operations = [
        migrations.AlterField(
            model_name='bench',
            name='avatar',
            field=models.ImageField(blank=True, default='default.png', null=True, upload_to='bench_avatars/'),
        ),
        migrations.AlterField(
            model_name='bench',
            name='district',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='benches.benchdistrict'),
        ),
        migrations.AlterField(
            model_name='bench',
            name='environment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='benches.benchenvironment'),
        ),
        migrations.AlterField(
            model_name='bench',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='benches.benchtype'),
        ),
        migrations.AlterField(
            model_name='benchimage',
            name='image',
            field=models.ImageField(upload_to=benches.models.BenchImage.image_upload_to, verbose_name='Дополнительное фото'),
        ),
    ]


==================== ./benches\migrations\0005_alter_bench_author.py ====================
# Generated by Django 4.2 on 2023-12-07 12:25

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import userSystem.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('benches', '0004_alter_bench_avatar_alter_bench_district_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='bench',
            name='author',
            field=models.ForeignKey(default=userSystem.models.CustomUser, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор'),
        ),
    ]


==================== ./benches\migrations\0006_alter_bench_author_alter_bench_rating.py ====================
# Generated by Django 4.2 on 2023-12-07 12:28

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import userSystem.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('benches', '0005_alter_bench_author'),
    ]

    operations = [
        migrations.AlterField(
            model_name='bench',
            name='author',
            field=models.ForeignKey(default=userSystem.models.CustomUser, editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор'),
        ),
        migrations.AlterField(
            model_name='bench',
            name='rating',
            field=models.FloatField(default=0.0),
        ),
    ]


==================== ./benches\migrations\0007_alter_bench_rating.py ====================
# Generated by Django 4.2 on 2023-12-07 12:29

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('benches', '0006_alter_bench_author_alter_bench_rating'),
    ]

    operations = [
        migrations.AlterField(
            model_name='bench',
            name='rating',
            field=models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)]),
        ),
    ]


==================== ./benches\migrations\0008_alter_benchimage_image.py ====================
# Generated by Django 4.2 on 2023-12-07 12:46

import benches.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('benches', '0007_alter_bench_rating'),
    ]

    operations = [
        migrations.AlterField(
            model_name='benchimage',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to=benches.models.BenchImage.image_upload_to, verbose_name='Дополнительное фото'),
        ),
    ]


==================== ./benches\migrations\__init__.py ====================


==================== ./BenchesAlmaty\asgi.py ====================
"""
ASGI config for BenchesAlmaty project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BenchesAlmaty.settings')

application = get_asgi_application()


==================== ./BenchesAlmaty\settings.py ====================
"""
Django settings for BenchesAlmaty project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+n+^0pb2-l(sn+nvrf3gfi-)3e=)-ey2xi=+mj3-xvd%$(sc0r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1','192.168.60.174']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 'livereload', # pip install django-livereload-server

    'rosetta',
    'tailwind',
    'mySite', # app name
    'userSystem', # login system
    'benches',

    'django_browser_reload',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',

    'django_browser_reload.middleware.BrowserReloadMiddleware',
]

ROOT_URLCONF = 'BenchesAlmaty.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = 'BenchesAlmaty.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

DEFAULT_CHARSET = 'utf-8'
os.environ["DJANGO_SETTINGS_MODULE"] = "BenchesAlmaty.settings"
os.environ["PYTHONIOENCODING"] = "UTF-8"

LANGUAGE_CODE = 'ru'
TIME_ZONE = 'Asia/Almaty'

USE_I18N = True
USE_L10N = True
USE_TZ = True

LANGUAGES = [
    ('ru', 'Russian'),
    ('kk', 'Kazakh'),
    ("en", "English"),
    # Add more languages if needed
]

LOCALE_PATHS = (os.path.join(BASE_DIR, 'locale'),)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/login/'

TAILWIND_APP_NAME = 'mySite'

INTERNAL_IPS = [
    "127.0.0.1",
]

NPM_BIN_PATH = "C:/Program Files/nodejs/npm.cmd"


AUTH_USER_MODEL = 'userSystem.CustomUser'

DEFAULT_AVATAR = MEDIA_ROOT + 'default.png'

==================== ./BenchesAlmaty\urls.py ====================
from django.urls import include, path
from django.views.generic.base import RedirectView
from django.contrib import admin
from django.conf import settings
from django.conf.urls.static import static

from userSystem import views as user_views
from benches import views as benches_views

app_name = 'mySite'

urlpatterns = [
    path('favicon.ico/', RedirectView.as_view(url='/static/img/reread-logo.ico', permanent=True), name='favicon'),
    path('admin/', admin.site.urls),
    path('rosetta/', include('rosetta.urls')),
    path('', include('mySite.urls')),
    path('i18n/', include('django.conf.urls.i18n')),

    # login system
    path('register/', user_views.register, name='register'),
    path('login/', user_views.user_login, name='login'),
    path('logout/', user_views.user_logout, name='logout'),

    # profile system
    path('profile/', user_views.view_profile, name='view_profile'),
    path('profile/edit/', user_views.edit_profile, name='edit_profile'),

    path('profile/<str:username>/', user_views.other_user_profile, name='other_user_profile'),

    # bench system
    path('benches/', include('benches.urls')),

    path("__reload__/", include("django_browser_reload.urls")),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


==================== ./BenchesAlmaty\wsgi.py ====================
"""
WSGI config for BenchesAlmaty project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BenchesAlmaty.settings')

application = get_wsgi_application()


==================== ./BenchesAlmaty\__init__.py ====================


==================== ./mySite\admin.py ====================
from django.contrib import admin

# Register your models here.


==================== ./mySite\apps.py ====================
from django.apps import AppConfig


class MysiteConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'mySite'


==================== ./mySite\models.py ====================


==================== ./mySite\tests.py ====================
from django.test import TestCase

# Create your tests here.


==================== ./mySite\urls.py ====================
from django.urls import path
from . import views

app_name = 'mySite'

urlpatterns = [
    path('', views.index, name='index'),

    
]

==================== ./mySite\views.py ====================
from django.shortcuts import render
from benches.models import Bench

from userSystem.models import Profile

def index(request):
    benches = Bench.objects.all()

    if request.user.is_authenticated:
        try:
            profile = Profile.objects.get(user=request.user)
        except Profile.DoesNotExist:
            # Если профиль не существует, создайте его здесь
            profile = Profile(user=request.user)
            profile.save()
        profile = Profile.objects.get(user=request.user)
        return render(request, "mySite/index.html", {'profile': profile, 'benches': benches})
    else:
        return render(request, "mySite/index.html", {'benches': benches})


# ПОФИКСИТЬ КОСТЫЛЬ С ОТОБРАЖЕНИЕМ ФОТО, СДЕЛАТЬ ПРОВЕРКУ В ШАБЛОНЕ

==================== ./mySite\__init__.py ====================


==================== ./mySite\migrations\__init__.py ====================


==================== ./userSystem\admin.py ====================
from django.contrib import admin

from userSystem.models import Profile, CustomUser

@admin.register(Profile)
class ProfileAdmin(admin.ModelAdmin):
    pass

@admin.register(CustomUser)
class CustomUserAdmin(admin.ModelAdmin):
    pass

==================== ./userSystem\apps.py ====================
from django.apps import AppConfig


class userSystemConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'userSystem'


==================== ./userSystem\forms.py ====================
from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from .models import CustomUser, Profile

# login system
class RegistrationForm(UserCreationForm):
    class Meta:
        model = CustomUser
        fields = ('username', 'email', 'password1', 'password2')  # Поля, которые будут отображаться на форме

class LoginForm(AuthenticationForm):
    # Вы можете добавить дополнительные поля, если необходимо
    class Meta:
        model = CustomUser

# profile system
class ProfileForm(forms.ModelForm):
    class Meta:
        model = Profile
        fields = ['name', 'surname', 'bio', 'avatar']


==================== ./userSystem\models.py ====================
from django.db import models
from django.contrib.auth.models import AbstractUser

# login system
class CustomUser(AbstractUser):
    # Добавьте здесь дополнительные поля, если необходимо
    email = models.EmailField(unique=True)
    # ваша дополнительная информация
    # ...
    
    USERNAME_FIELD = 'username'  # или любое другое поле, которое вы хотите использовать для входа
    pass



class Profile(models.Model):
    LEVEL_CHOICES = [
        (0, 'Пользователь'),
        (1, 'Активный пользователь'),
        (2, 'Эксперт'),
        (3, 'Лидер'),
        (4, 'Администрация⭐'),
    ]

    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE)
    name = models.CharField(max_length=50, blank=True, default='')
    surname = models.CharField(max_length=50, blank=True, default='')

    bio = models.TextField(blank=True)
    avatar = models.ImageField(default='default.png', upload_to='user_avatars/', blank=True, null=True)

    level = models.IntegerField(default=0, choices=LEVEL_CHOICES)

    def __str__(self):
        return self.user.username
    
    def get_avatar_url(self):
        if self.avatar:
            return self.avatar.url
        # Здесь вы можете вернуть путь к изображению по умолчанию или другую логику по вашему выбору
        return '/media/default.png'
    
    def save(self, *args, **kwargs):
        if not self.name:
            self.name = self.user.username
        super(Profile, self).save(*args, **kwargs)



==================== ./userSystem\tests.py ====================
from django.test import TestCase

# Create your tests here.


==================== ./userSystem\views.py ====================
from django.http import Http404
from django.shortcuts import get_object_or_404, render, redirect
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required

from .models import CustomUser, Profile

from .forms import RegistrationForm, LoginForm, ProfileForm

# login system
def register(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)  # Автоматически входить пользователя после успешной регистрации
            return redirect('mySite:index')
    else:
        form = RegistrationForm()
    return render(request, 'userSystem/register.html', {'form': form})

def user_login(request):
    if request.method == 'POST':
        form = LoginForm(request, request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('mySite:index')

    else:
        form = LoginForm()
    return render(request, 'userSystem/login.html', {'form': form})

def user_logout(request):
    logout(request)
    return redirect('mySite:index')


# profile system
@login_required
def view_profile(request):
    user_ip = request.META.get('REMOTE_ADDR', None)
    try:
        profile = Profile.objects.get(user=request.user)
    except Profile.DoesNotExist:
        # Если профиль не существует, создайте его здесь
        profile = Profile(user=request.user)
        profile.save()
    
    return render(request, 'userSystem/view_profile.html', {'profile': profile, 'user_ip': user_ip})

@login_required
def edit_profile(request):
    try:
        profile = Profile.objects.get(user=request.user)
    except Profile.DoesNotExist:
        # Если профиль не существует, создайте его здесь
        profile = Profile(user=request.user)
        profile.save()

    if request.method == 'POST':
        form = ProfileForm(request.POST, request.FILES, instance=profile)
        if form.is_valid():
            form.save()
            if request.POST.get('delete_avatar'):
                profile.avatar.delete()
                profile.avatar = None
                profile.save()
            return redirect('view_profile')

    else:
        form = ProfileForm(instance=profile)

    return render(request, 'userSystem/edit_profile.html', {'form': form, 'profile': profile})

def other_user_profile(request, username):
    try:
        user = get_object_or_404(CustomUser, username=username)
        profile = Profile.objects.get(user=user)
    except Http404:
        error_message = f"Профиль пользователя {username} не найден."
        return render(request, 'userSystem/other_user_profile.html', {'error_message': error_message}, status=404)

    return render(request, 'userSystem/other_user_profile.html', {'profile': profile})


==================== ./userSystem\__init__.py ====================


==================== ./userSystem\migrations\0001_initial.py ====================
# Generated by Django 4.2 on 2023-12-02 03:11

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='custom_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True)),
                ('avatar', models.ImageField(blank=True, default='default.jpg', null=True, upload_to='user_avatars/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='userSystem.customuser')),
            ],
        ),
    ]


==================== ./userSystem\migrations\0002_alter_customuser_groups_and_more.py ====================
# Generated by Django 4.2 on 2023-12-04 08:01

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('userSystem', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AlterField(
            model_name='profile',
            name='avatar',
            field=models.ImageField(blank=True, default='default.png', null=True, upload_to='user_avatars/'),
        ),
    ]


==================== ./userSystem\migrations\0003_profile_rank.py ====================
# Generated by Django 4.2 on 2023-12-04 13:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('userSystem', '0002_alter_customuser_groups_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='profile',
            name='rank',
            field=models.IntegerField(default=0),
        ),
    ]


==================== ./userSystem\migrations\0004_rename_rank_profile_level.py ====================
# Generated by Django 4.2 on 2023-12-04 14:08

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('userSystem', '0003_profile_rank'),
    ]

    operations = [
        migrations.RenameField(
            model_name='profile',
            old_name='rank',
            new_name='level',
        ),
    ]


==================== ./userSystem\migrations\0005_profile_name_profile_surname.py ====================
# Generated by Django 4.2.5 on 2023-12-05 03:46

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('userSystem', '0004_rename_rank_profile_level'),
    ]

    operations = [
        migrations.AddField(
            model_name='profile',
            name='name',
            field=models.CharField(default=1, max_length=50),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='profile',
            name='surname',
            field=models.CharField(default=1, max_length=50),
            preserve_default=False,
        ),
    ]


==================== ./userSystem\migrations\0006_alter_profile_name_alter_profile_surname.py ====================
# Generated by Django 4.2.5 on 2023-12-05 03:46

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('userSystem', '0005_profile_name_profile_surname'),
    ]

    operations = [
        migrations.AlterField(
            model_name='profile',
            name='name',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='profile',
            name='surname',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
    ]


==================== ./userSystem\migrations\0007_alter_profile_name_alter_profile_surname.py ====================
# Generated by Django 4.2.5 on 2023-12-05 03:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('userSystem', '0006_alter_profile_name_alter_profile_surname'),
    ]

    operations = [
        migrations.AlterField(
            model_name='profile',
            name='name',
            field=models.CharField(blank=True, default='', max_length=50),
        ),
        migrations.AlterField(
            model_name='profile',
            name='surname',
            field=models.CharField(blank=True, default='', max_length=50),
        ),
    ]


==================== ./userSystem\migrations\0008_alter_profile_level.py ====================
# Generated by Django 4.2.5 on 2023-12-05 04:00

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('userSystem', '0007_alter_profile_name_alter_profile_surname'),
    ]

    operations = [
        migrations.AlterField(
            model_name='profile',
            name='level',
            field=models.IntegerField(choices=[('0', 'Пользователь'), ('1', 'Активный пользователь'), ('2', 'Эксперт'), ('3', 'Лидер')], default=0),
        ),
    ]


==================== ./userSystem\migrations\0009_alter_customuser_email_alter_profile_level.py ====================
# Generated by Django 4.2.5 on 2023-12-05 04:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('userSystem', '0008_alter_profile_level'),
    ]

    operations = [
        migrations.AlterField(
            model_name='customuser',
            name='email',
            field=models.EmailField(max_length=254, unique=True),
        ),
        migrations.AlterField(
            model_name='profile',
            name='level',
            field=models.IntegerField(choices=[(0, 'Пользователь'), (1, 'Активный пользователь'), (2, 'Эксперт'), (3, 'Лидер'), (4, 'Администрация⭐')], default=0),
        ),
    ]


==================== ./userSystem\migrations\__init__.py ====================


